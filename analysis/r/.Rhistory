list.of.packages <- c('tidyverse', 'data.table','cluster','gridExtra',
'ggthemes','grid','magrittr','latex2exp')
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)){
install.packages(new.packages)}
install.packages("tidyverse", dependencies=TRUE)
library(tidyverse)
list.of.packages <- c('tidyverse', 'data.table','cluster','gridExtra',
'ggthemes','grid','magrittr','latex2exp')
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)){
install.packages(new.packages)}
# Load packages
sapply(list.of.packages, library, character.only=T)
colores = c("#32CD32","skyeblue")
plot(1:10,col = "#32CD32")
points(1:10*0.5, col = "skyblue")
plot(1:10,col = "#32CD32", pch = 16)
points(1:10*0.5, col = "skyblue", pch = 16)
plot(1:10, bg = "#32CD32", pch = 21)
points(1:10*0.5, bg = "skyblue", pch = 16)
points(1:10*0.5, bg = "skyblue", pch = 21)
plot(1:10, bg = "#32CD32", pch = 21)
points(1:10*0.5, bg = "skyblue", pch = 21)
?boxplot
mat <- cbind(Uni05 = (1:100)/21, Norm = rnorm(100),
`5T` = rt(100, df = 5), Gam2 = rgamma(100, shape = 2))
boxplot(mat)
boxplot(mat,
col = c("azure","moroon","limegreen","steelblue"))
boxplot(mat,
col = c("azure","mooron","limegreen","steelblue"))
boxplot(mat,
col = c("azure","navy","limegreen","steelblue"))
boxplot(mat,
border = 'black',
col = c("azure","navy","limegreen","steelblue"))
boxplot(mat,
border = 'red',
col = c("azure","navy","limegreen","steelblue"))
boxplot(mat,
border = 'grey20',
col = c("azure","navy","limegreen","steelblue"))
tail(mat)
aco = 1
sessions = 1
list_Ss = 331
last_n_ses(list_Ss=list_Ss, n=sessions, aco=aco)
# Source custom functions
path_functions = "/home/jemanj/Documentos/2019A/paper_gen_decrement/analysis/r"
setwd(path_functions)
# ==============================================================================
## For data wrangling and transformation
source("last_n_ses.r")
source("bind_all_ss.r")
# Source custom functions
path_functions = "~/Documentos/2019A/paper_gen_decrement/analysis/r"
setwd(path_functions)
# ==============================================================================
## For data wrangling and transformation
source("last_n_ses.r")
source("bind_all_ss.r")
source("read_sep_by_lever.r")
last_n_ses(list_Ss=list_Ss, n=sessions, aco=aco)
View(last_n_ses)
View(bind_all_Ss)
View(read_sep_by_lever)
View(last_n_ses)
pr = "~/Documentos/2019A/paper_gen_decrement/Data/processed/baseline/"
path_read = "~/Documentos/2019A/paper_gen_decrement/Data/processed/baseline/"
last_n_ses(list_Ss=list_Ss, n=sessions, path_read=path_read)
k = last_n_ses(list_Ss=list_Ss, n=sessions, path_read=path_read)
df_2 <- read_sep_by_lever(k, 1) %>% as.data.frame()
df_2
k
rp_index=c(1, 11)
df_2 <- df_2[df_2$evento %in% rp_index, ]
# print(k)
df_2$bins <- get_bins(df_2$cum_dt, 1, 180, 1)
# Other utils
source("get_bins.r")
# Source custom functions
path_functions = "~/Documentos/2019A/paper_gen_decrement/analysis/r"
# Other utils
source("get_bins.r")
# Source custom functions
path_functions = "~/Documentos/2019A/paper_gen_decrement/analysis/r"
setwd(path_functions)
# Other utils
source("get_bins.r")
get_bins(df_2$cum_dt, 1, 180, 1)
# print(k)
df_2$bins <- get_bins(df_2$cum_dt, 1, 180, 1)
l = 1
cde <- unique(df_2$cde)
subj <- unique(df_2$sujeto)
sess <- unique(df_2$sesion)
met2 <- data.frame()
met3 <- data_frame()
l <- cde[l]
df_3 <- df_2[df_2$cde == l, ]
met2 <- data_frame()
met3 <- data_frame()
j = 1
df_4 <- df_3[df_3$trial == j, ]
r_times <- df_4$bins
bp_km(r_times)
bp_km <- function(r_times){
# get a 2x2 df with #resp per second
res <- 1
x <- seq(1,180,res)
resp_sec <- r_times %>%
{
bins <- .
rate <- f_table(bins,1,180,res) # f_table is a custom fn
rate
}
resp_sec <- data.frame(x = x, y = resp_sec)
resp_sec_scaled <- apply(resp_sec, 2, scale) # clustering works better scaled
colnames(resp_sec_scaled) <- c("x","y")
set.seed(123)
gap <- clusGap(resp_sec_scaled,pam,K.max = 4, B = 500) # gap statistic
# to compute the optimal number of clusters btw 1 and 4
k <- maxSE(gap$Tab[, "gap"], gap$Tab[, "SE.sim"], method="Tibs2001SEmax")
data.frame(opt_k = k)
}
met <- bp_km(r_times)
source("f_table.r")
met <- bp_km(r_times)
met
plot(r_times)
hist(r_times)
# get a 2x2 df with #resp per second
res <- 1
x <- seq(1,180,res)
resp_sec <- r_times %>%
{
bins <- .
rate <- f_table(bins,1,180,res) # f_table is a custom fn
rate
}
resp_sec <- data.frame(x = x, y = resp_sec)
plot(resp_sec)
resp_sec <- data.frame(x = x, y = resp_sec)
resp_sec_scaled <- apply(resp_sec, 2, scale) # clustering works better scaled
colnames(resp_sec_scaled) <- c("x","y")
set.seed(123)
gap <- clusGap(resp_sec_scaled,pam,K.max = 4, B = 500) # gap statistic
gap
plot(resp_sec,col = pam(resp_sec_scaled)$clustering)
plot(resp_sec,col = pam(resp_sec_scaled,1)$clustering)
pam(resp_sec_scaled,k = 1)
maxSE(gap$Tab[, "gap"], gap$Tab[, "SE.sim"], method="Tibs2001SEmax")
gap <- clusGap(resp_sec_scaled,pam,K.max = 4, B = 500) # gap statistic
maxSE(gap$Tab[, "gap"], gap$Tab[, "SE.sim"], method="Tibs2001SEmax")
# to compute the optimal number of clusters btw 1 and 4
k <- maxSE(gap$Tab[, "gap"], gap$Tab[, "SE.sim"], method="Tibs2001SEmax")
data.frame(opt_k = k)
bp_km <- function(r_times){
# get a 2x2 df with #resp per second
res <- 1
x <- seq(1,180,res)
resp_sec <- r_times %>%
{
bins <- .
rate <- f_table(bins,1,180,res) # f_table is a custom fn
rate
}
resp_sec <- data.frame(x = x, y = resp_sec)
resp_sec_scaled <- apply(resp_sec, 2, scale) # clustering works better scaled
colnames(resp_sec_scaled) <- c("x","y")
set.seed(123)
gap <- clusGap(resp_sec_scaled,pam,K.max = 4, B = 500) # gap statistic
# to compute the optimal number of clusters btw 1 and 4
k <- maxSE(gap$Tab[, "gap"], gap$Tab[, "SE.sim"], method="Tibs2001SEmax")
data.frame(opt_k = k)
}
r_rimes
r_times
plot(resp_sec)
plot(resp_sec)
plot(resp_sec)
# get a 2x2 df with #resp per second
res <- 1
x <- seq(1,180,res)
resp_sec <- r_times %>%
{
bins <- .
rate <- f_table(bins,1,180,res) # f_table is a custom fn
rate
}
resp_sec <- data.frame(x = x, y = resp_sec)
resp_sec_scaled <- apply(resp_sec, 2, scale) # clustering works better scaled
plot(resp_sec)
plot(resp_sec_scaled)
plot(resp_sec)
resp_sec_scaled <- apply(resp_sec, 2, scale) # clustering works better scaled
colnames(resp_sec_scaled) <- c("x","y")
set.seed(123)
gap <- clusGap(resp_sec_scaled,pam,K.max = 4, B = 500) # gap statistic
# to compute the optimal number of clusters btw 1 and 4
k <- maxSE(gap$Tab[, "gap"], gap$Tab[, "SE.sim"], method="Tibs2001SEmax")
maxSE(gap$Tab[, "gap"], gap$Tab[, "SE.sim"], method="Tibs2001SEmax")
gap
clusGap(resp_sec_scaled,pam,K.max = 4, B = 500)
gap <- clusGap(resp_sec_scaled,pam,K.max = 6, B = 500) # gap statistic
# to compute the optimal number of clusters btw 1 and 4
k <- maxSE(gap$Tab[, "gap"], gap$Tab[, "SE.sim"], method="Tibs2001SEmax")
data.frame(opt_k = k)
source("~/Documentos/2019A/paper_gen_decrement/analysis/r/wrapper.r")
# ==============================================================================
# Load data ----
path_analysis = "~/Documentos/2019A/paper_gen_decrement/analysis/"
path_data_results = path_analysis + "data_results/"
path_figures = path_analysis + "figures/"
load(path_data_results + "rate_norm.RData")
load(path_data_results + 'dkl.RData')
load(path_data_results + 'qqIRI_data.RData')
load(path_data_results + 'contiguity.RData')
load(list.files(path = path_data_results,
pattern = "^start(.*)RData",
full.names = T))
load(path_data_results + "overall_rate_data.RData")
load(path_data_results + "correlation_data.RData")
# ==============================================================================
# See plots in new window
options(device = "x11")
# ggplot theme for all plots
theme_set(pub_theme())
shape_param <- c("1" = 21, "2" = 21)
## Normalized response rate
BL_norm <-
resp_norm_plot(norm_rate_BL, col_param, "lever",
fill_param,shape_param,1,
p_size = 0.16) +
theme(plot.margin = margin(0.2,0.5,0,0, "cm"),
legend.position = c(0.16,0.9),
legend.text = element_text(size = 7.5),
legend.title = element_text(size = 8))
norm_rate_BL
resp_norm_plot(norm_rate_BL, col_param, "lever",
fill_param,shape_param,1,
p_size = 0.16)
source("~/Documentos/2019A/paper_gen_decrement/analysis/r/wrapper.r")
# ==============================================================================
# Load data ----
path_analysis = "~/Documentos/2019A/paper_gen_decrement/analysis/"
path_data_results = path_analysis + "data_results/"
path_figures = path_analysis + "figures/"
load(path_data_results + "rate_norm.RData")
load(path_data_results + 'dkl.RData')
load(path_data_results + 'qqIRI_data.RData')
load(path_data_results + 'contiguity.RData')
load(list.files(path = path_data_results,
pattern = "^start(.*)RData",
full.names = T))
load(path_data_results + "overall_rate_data.RData")
load(path_data_results + "correlation_data.RData")
# ==============================================================================
# See plots in new window
options(device = "x11")
# ggplot theme for all plots
theme_set(pub_theme())
shape_param <- c("1" = 21, "2" = 21)
## Normalized response rate
BL_norm <-
resp_norm_plot(norm_rate_BL, col_param, "lever",
fill_param,shape_param,1,
p_size = 0.16) +
theme(plot.margin = margin(0.2,0.5,0,0, "cm"),
legend.position = c(0.16,0.9),
legend.text = element_text(size = 7.5),
legend.title = element_text(size = 8))
BL_head <-
resp_norm_plot(norm_rate_BL, col_param, "head",
fill_param,shape_param,1,
p_size = 0.2) +
theme(legend.position = 'none',
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
plot.margin = margin(0.2,0.5,0,0, "cm"))
Exp_norm <-
resp_norm_plot(norm_rate_Exp, col_param, "lever",
fill_param, shape_param,1,
p_size = 0.16) +
theme(plot.margin = margin(0.2,0.5,0,0, "cm"))
Exp_head <-
resp_norm_plot(norm_rate_Exp, col_param, "head",
fill_param, shape_param,1,
p_size = 0.2) +
theme(legend.position = 'none',
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
plot.margin = margin(0.2,0.5,0,0, "cm"))
## DKL plot
col_param2  <- c("Baseline" = "black","Experimental" = "black")
list.of.packages <- c('tidyverse', 'data.table','cluster','gridExtra',
'ggthemes','grid','magrittr','latex2exp')
list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
